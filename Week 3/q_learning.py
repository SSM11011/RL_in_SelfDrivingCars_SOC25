# -*- coding: utf-8 -*-
"""SoC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12uwUvWUIrdyCN3aLxqGSc6daiFkE94eD
"""

import gymnasium as gym
import numpy as np
import matplotlib.pyplot as plt
import imageio

env = gym.make("FrozenLake-v1", is_slippery=False, map_name="4x4", render_mode="rgb_array")
env.reset()
plt.imshow(env.render())

n_states = env.observation_space.n # = 16
n_actions = env.action_space.n # = 4
q_table = np.zeros((n_states, n_actions))
alpha = 0.1 # learning rate
gamma = 0.99 # discount factor
epsilon = 1.0
epsilon_decay = 0.9995
min_epsilon = 0.01
episodes = 10000  # total number of episodes
rewards = []

for ep in range(episodes):
    state = env.reset()[0]
    total_reward = 0
    done = False

    while not done:
        if np.random.rand() < epsilon:
            action = env.action_space.sample()
        else:
            action = np.argmax(q_table[state])

        next_state, reward, done, _, _ = env.step(action)
        q_table[state, action] += alpha * (reward + gamma * np.max(q_table[next_state]) - q_table[state, action])
        state = next_state
        total_reward += reward

    rewards.append(total_reward)
    epsilon = max(min_epsilon, epsilon * epsilon_decay)

# Plot rewards
plt.plot(np.convolve(rewards, np.ones(100)/100, mode='valid'))
plt.xlabel('Episode')
plt.ylabel('Average Reward (100ep)')
plt.title('Q-learning on FrozenLake')
plt.grid()
plt.show()

with imageio.get_writer("frozenlake_qlearning.gif", mode='I', duration=1, loop=0) as writer:
    state = env.reset()[0]
    done = False
    steps = 0
    while not done and steps < 200:
        frame = env.render()
        writer.append_data(frame)
        action = np.argmax(q_table[state])
        state, _, done, _, _ = env.step(action)
        steps += 1